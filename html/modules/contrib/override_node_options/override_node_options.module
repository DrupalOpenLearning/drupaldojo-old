<?php

/**
 * @file
 * Main module file for override_node_options.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeForm;

/**
 * Implements hook_form_alter().
 */
function override_node_options_form_alter(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof NodeForm) {
    /** @var Drupal\Core\Session\AccountProxyInterface $user */
    $user = \Drupal::currentUser();

    if ($user->hasPermission('administer nodes')) {
      return;
    }

    $node_type = $form_object->getEntity()->bundle();

    $form['revision']['#access'] = $user->hasPermission("override $node_type revision option");
  }
}

/**
 * Implements hook_entity_field_access_alter().
 */
function override_node_options_entity_field_access_alter(array &$grants, array $context) {
  $entity_type = $context['field_definition']->getTargetEntityTypeId();

  if ($entity_type == 'node' && $context['operation'] == 'edit' && !$context['account']->hasPermission('administer nodes')) {
    $bundle = $context['items']->getEntity()->bundle();

    switch ($context['field_definition']->getName()) {
      case 'promote':
        $grants[':default'] = AccessResult::allowedIfHasPermission($context['account'], "override $bundle promote to front page option");
        break;

      case 'sticky':
        $grants[':default'] = AccessResult::allowedIfHasPermission($context['account'], "override $bundle sticky option");
        break;

      case 'revision_log':
        $grants[':default'] = AccessResult::allowedIfHasPermission($context['account'], "override $bundle revision log entry");
        break;

      case 'created':
        $grants[':default'] = AccessResult::allowedIfHasPermission($context['account'], "override $bundle authored on option");
        break;

      case 'uid':
        $grants[':default'] = AccessResult::allowedIfHasPermission($context['account'], "override $bundle authored by option");
        break;

      case 'status':
        $grants[':default'] = AccessResult::allowedIfHasPermission($context['account'], "override $bundle published option");
        break;
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * @see NodeForm::actions()
 *
 * @todo Remove when https://www.drupal.org/node/1901216 is fixed.
 */
function override_node_options_entity_type_alter(array &$entity_types) {
  // Set the node form class to OverrideNodeOptionsNodeForm so that we can
  // override NodeForm::actions() and allow for overriding the publish option.
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['node']->setFormClass('default', '\Drupal\override_node_options\Form\OverrideNodeOptionsNodeForm');
  $entity_types['node']->setFormClass('edit', '\Drupal\override_node_options\Form\OverrideNodeOptionsNodeForm');
}
