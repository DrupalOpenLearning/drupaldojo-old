<?php

/**
 * @file
 * Enables Group functionality for the Node module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\GroupContentType;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;

// We need a grant ID for match-all access records.
define('GNODE_MASTER_GRANT_ID', 1986);

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function gnode_node_type_insert(NodeTypeInterface $node_type) {
  \Drupal::service('plugin.manager.group_content_enabler')->clearCachedDefinitions();
}

/**
 * Implements hook_node_access().
 *
 * When trying to view, update or delete a node it suffices to have the right to
 * do so in only one group the node belongs to. If you wish to prevent any such
 * action on your own terms, implement hook_node_access() in your module.
 */
function gnode_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // We do not care about create access as we have our own wizard for that. Any
  // operation aside from 'view', 'update' and 'delete' is also unsupported.
  if (!in_array($op, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Some modules, including the code in \Drupal\node\NodeForm::access() may
  // check for 'view', 'update' or 'delete' access on new nodes, even though
  // that makes little sense. We need to account for it to avoid crashes because
  // we would otherwise query the DB with a non-existent node ID.
  if ($node->isNew()) {
    return AccessResult::neutral();
  }

  $plugin_id = 'group_node:' . $node->bundle();

  // Only act if there are group content types for this node type.
  $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);
  if (empty($group_content_types)) {
    return AccessResult::neutral();
  }

  // Load all the group content for this node.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByProperties([
      'type' => array_keys($group_content_types),
      'entity_id' => $node->id(),
    ]);

  // If the node does not belong to any group, we have nothing to say.
  if (empty($group_contents)) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }

  // From this point on you need group to allow you to perform the requested
  // operation. If you are not granted access for a node belonging to a group,
  // you should be denied access instead.
  switch ($op) {
    case 'view':
      foreach ($groups as $group) {
        if ($node->isPublished()) {
          if ($group->hasPermission("view $plugin_id entity", $account)) {
            return AccessResult::allowed();
          }
        }
        elseif ($group->hasPermission("view unpublished $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      break;

    case 'update':
    case 'delete':
      foreach ($groups as $group) {
        if ($group->hasPermission("$op any $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
        elseif ($account->id() == $node->getOwnerId() && $group->hasPermission("$op own $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      break;
  }

  return AccessResult::forbidden();
}

/**
 * Implements hook_node_grants().
 *
 * We define the following grants:
 * - 'gnode:NODE_TYPE': Grants view and update or delete any access to nodes.
 * - 'gnode_unpublished:NODE_TYPE': Grants view access to unpublished nodes.
 * - 'gnode_author:UID:NODE_TYPE': Grants update or delete access to authors.
 * - 'gnode_bypass': Given to anyone with the 'bypass group access' permission.
 *
 * @see gnode_node_access_records()
 */
function gnode_node_grants(AccountInterface $account, $op) {
  // Provide the master grant for users who can bypass group access.
  if ($account->hasPermission('bypass group access')) {
    return ['gnode_bypass' => [GNODE_MASTER_GRANT_ID]];
  }

  // Gather the machine names of all node types.
  $entity_type_manager = \Drupal::entityTypeManager();
  $node_type_ids = $entity_type_manager
    ->getStorage('node_type')
    ->getQuery()
    ->execute();

  // Initialize a grant array for members and one for anonymous/outsider users.
  $grants_m = $grants_ao = [];

  // If the user could not bypass group access, we need to check their access
  // for every single group. Because loading every group would incur a massive
  // performance hit, we only load those groups the user is a member of.
  /** @var \Drupal\group\GroupMembershipLoaderInterface $membership_loader */
  $membership_loader = \Drupal::service('group.membership_loader');
  foreach ($membership_loader->loadByUser($account) as $group_membership) {
    $group = $group_membership->getGroup();

    // Add the groups the user is a member of to use later on.
    $member_gids[] = $gid = $group->id();

    foreach ($node_type_ids as $node_type_id) {
      $plugin_id = "group_node:$node_type_id";

      switch ($op) {
        case 'view':
          if ($group->hasPermission("view $plugin_id entity", $account)) {
            $grants_m["gnode:$node_type_id"][] = $gid;
          }
          if ($group->hasPermission("view unpublished $plugin_id entity", $account)) {
            $grants_m["gnode_unpublished:$node_type_id"][] = $gid;
          }
          break;

        case 'update':
        case 'delete':
          // If you can act on any node, there's no need for the author grant.
          if ($group->hasPermission("$op any $plugin_id entity", $account)) {
            $grants_m["gnode:$node_type_id"][] = $gid;
          }
          elseif ($group->hasPermission("$op own $plugin_id entity", $account)) {
            $uid = $account->id();
            $grants_m["gnode_author:$uid:$node_type_id"][] = $gid;
          }
          break;
      }
    }
  }

  // All other groups have the benefit of sharing the same permission set among
  // all anonymous or authenticated users per group type. We can therefore know
  // the user's permissions for all groups of the same type they aren't part of.
  /** @var \Drupal\group\Entity\GroupTypeInterface[] $group_types */
  $group_types = $entity_type_manager->getStorage('group_type')->loadMultiple();
  foreach ($group_types as $group_type) {
    // Get the IDs of all the groups the user is not part of for the group type.
    $query = $entity_type_manager->getStorage('group')->getQuery();
    $query->condition('type', $group_type->id());
    if (!empty($member_gids)) {
      $query->condition('id', $member_gids, 'NOT IN');
    }
    $gids = $query->execute();

    // If we could not retrieve any group IDs, skip to the next group type.
    if (empty($gids)) {
      continue;
    }

    // Grab the anonymous or outsider role for the group type depending on the
    // user's account status (anonymous or authenticated).
    $group_role = $account->isAnonymous()
      ? $group_type->getAnonymousRole()
      : $group_type->getOutsiderRole();

    foreach ($node_type_ids as $node_type_id) {
      $plugin_id = "group_node:$node_type_id";

      // Only check for permissions if the group type has the group_node plugin
      // installed for the node type.
      if (!$group_type->hasContentPlugin($plugin_id)) {
        continue;
      }

      switch ($op) {
        case 'view':
          if ($group_role->hasPermission("view $plugin_id entity")) {
            $grants_ao["gnode:$node_type_id"][] = $gids;
          }
          if ($group_role->hasPermission("view unpublished $plugin_id entity")) {
            $grants_ao["gnode_unpublished:$node_type_id"][] = $gids;
          }
          break;

        case 'update':
        case 'delete':
          // If you can act on any node, there's no need for the author grant.
          if ($group_role->hasPermission("$op any $plugin_id entity")) {
            $grants_ao["gnode:$node_type_id"][] = $gids;
          }
          elseif ($group_role->hasPermission("$op own $plugin_id entity")) {
            $uid = $account->id();
            $grants_ao["gnode_author:$uid:$node_type_id"][] = $gids;
          }
          break;
      }
    }
  }

  // The code above populated the anonymous/outsider grants by adding the group
  // IDs per group type. We need to combine this into one big list of group IDs
  // per entry in the $grants_ao array.
  foreach ($grants_ao as $key => $gids_per_group_type) {
    $grants_ao[$key] = array_reduce($gids_per_group_type, 'array_merge', []);
  }

  // Recursively merge the member grants with the anonymous/outsider grants.
  return array_merge_recursive($grants_m, $grants_ao);
}

/**
 * Implements hook_node_access_records().
 *
 * @see gnode_node_grants()
 */
function gnode_node_access_records(NodeInterface $node) {
  $records = [];
  $type = $node->bundle();

  // Only act if there are group content types for this node type.
  $group_content_types = GroupContentType::loadByContentPluginId("group_node:$type");
  if (empty($group_content_types)) {
    return $records;
  }

  // Load all of the group content for this node.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByProperties([
      'type' => array_keys($group_content_types),
      'entity_id' => $node->id()
    ]);

  // Only act if there are group content entities for this node.
  if (empty($group_contents)) {
    return $records;
  }

  // We can use the same grant-all base because we will only hand out the grants
  // based on the $op parameter in hook_node_grants().
  $base = [
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
    'priority' => 0,
  ];

  // Set records for every group the node belongs to.
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $gid = $group_content->getGroup()->id();

    // Add the non-author record for viewing nodes.
    $prefix = $node->isPublished() ? 'gnode' : 'gnode_unpublished';
    $records[] = ['gid' => $gid, 'realm' => "$prefix:$type"] + $base;

    // Add the author record for updating or deleting.
    $uid = $node->getOwnerId();
    $records[] = ['gid' => $gid, 'realm' => "gnode_author:$uid:$type"] + $base;
  }

  // Add the general access bypass record.
  $records[] = ['gid' => GNODE_MASTER_GRANT_ID, 'realm' => 'gnode_bypass'] + $base;

  return $records;
}
